name: TSG Content Review
run-name: Content review by ${{ github.actor }}

on:
  push:
    branches: [Deployment, replit, 'feature/**']
    paths: ['client/src/**/*.tsx', 'client/src/**/*.jsx']
  pull_request:
    branches: [Deployment, replit]
    paths: ['client/src/**/*.tsx', 'client/src/**/*.jsx']


env:
  NODE_VERSION: '18'
  CLAUDE_MODEL: claude-3-7-sonnet-20250219

permissions:
  contents: read
  pull-requests: write

jobs:
  content-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- client/src/ | grep -E '\\.(tsx|jsx)$' | head -10)
          else
            FILES=$(git diff --name-only HEAD~1 HEAD -- client/src/ | grep -E '\\.(tsx|jsx)$' | head -10)
          fi

          if [ -z "$FILES" ]; then
            echo "No relevant files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude review
        if: steps.changes.outputs.has_changes == 'true'
        id: review
        uses: anthropics/claude-code-base-action@v0.0.4
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt_file: .github/prompts/content-review.md
          allowed_tools: Read,Glob,Grep,Bash
          timeout_minutes: 45
          max_turns: 90

      - name: Parse review results
        if: steps.changes.outputs.has_changes == 'true'
        id: parse
        run: |
          if [ -f "${{ steps.review.outputs.execution_file }}" ]; then
            # Extract the last assistant message
            REVIEW=$(jq -r '[.[] | select(.type == "assistant")] | last | .message.content[] | select(.type == "text") | .text' "${{ steps.review.outputs.execution_file }}" 2>/dev/null || echo "Failed to parse review")

            # Set output
            echo "review<<EOF" >> $GITHUB_OUTPUT
            echo "$REVIEW" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Check for critical issues
            if echo "$REVIEW" | grep -q "ðŸ”´.*Critical"; then
              echo "has_critical=true" >> $GITHUB_OUTPUT
            else
              echo "has_critical=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "review=Review execution failed - no output file found" >> $GITHUB_OUTPUT
            echo "has_critical=false" >> $GITHUB_OUTPUT
          fi

      - name: Post review comment
        if: steps.changes.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const review = `${{ steps.parse.outputs.review }}`;
            const hasCritical = ${{ steps.parse.outputs.has_critical }};

            const comment = `## ðŸ¤– TSG Content Review

            **Files Reviewed:** ${{ steps.changes.outputs.files }}

            ---

            ${review}

            ---

            *Automated review by Claude AI following TSG content standards*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Set status
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const hasCritical = ${{ steps.parse.outputs.has_critical }};
            const status = hasCritical ? 'failure' : 'success';
            const description = hasCritical ? 'Critical content issues found' : 'Content review passed';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              context: 'TSG Content Review',
              description: description
            });
