name: TSG Fulfillment Content Review
run-name: Content review by ${{ github.actor }} on ${{ github.ref_name }}

# Workflow triggers on push and pull request events
on:
  push:
    branches:
      - Deployment
      - replit
      - 'feature/**'
    paths:
      - 'client/src/**/*.tsx'
      - 'client/src/**/*.jsx'
      - 'client/src/**/*.ts'
      - 'client/src/**/*.js'
      - 'claude.md'  # Trigger when standards are updated
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - Deployment
      - replit
    paths:
      - 'client/src/**/*.tsx'
      - 'client/src/**/*.jsx'
      - 'client/src/**/*.ts'
      - 'client/src/**/*.js'
  workflow_dispatch:
    inputs:
      review_depth:
        description: 'Content review thoroughness'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - standard
          - comprehensive

# Global environment variables
env:
  NODE_VERSION: '18'
  REVIEW_TIMEOUT: '30'
  CLAUDE_MODEL: 'claude-3-7-sonnet-20250219'

# Repository permissions
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Job 1: Detect and validate changed files
  path-detection:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.filter.outputs.changes }}
      tsx-files: ${{ steps.filter.outputs.tsx_files }}
      jsx-files: ${{ steps.filter.outputs.jsx_files }}
      ts-files: ${{ steps.filter.outputs.ts_files }}
      js-files: ${{ steps.filter.outputs.js_files }}
      all-files: ${{ steps.filter.outputs.all_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diff analysis

      - name: Detect changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: json
          filters: |
            changes:
              - 'client/src/**/*.tsx'
              - 'client/src/**/*.jsx'
              - 'client/src/**/*.ts'
              - 'client/src/**/*.js'
            tsx:
              - added|modified: 'client/src/**/*.tsx'
            jsx:
              - added|modified: 'client/src/**/*.jsx'
            ts:
              - added|modified: 'client/src/**/*.ts'
            js:
              - added|modified: 'client/src/**/*.js'

  # Job 2: Load and validate company standards
  load-standards:
    runs-on: ubuntu-latest
    outputs:
      standards-content: ${{ steps.read-standards.outputs.content }}
      config-valid: ${{ steps.validate.outputs.valid }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read TSG standards from claude.md
        id: read-standards
        run: |
          if [ -f "claude.md" ]; then
            # Read the entire claude.md file
            CLAUDE_CONTENT=$(cat claude.md)
            
            # Set multiline output
            echo "content<<EOF" >> $GITHUB_OUTPUT
            echo "$CLAUDE_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "‚úÖ Found claude.md standards file"
          else
            echo "‚ö†Ô∏è claude.md not found, using default standards"
            echo "content<<EOF" >> $GITHUB_OUTPUT
            cat << 'DEFAULT_STANDARDS' >> $GITHUB_OUTPUT
          # TSG Fulfillment Services Default Standards
          
          ## Brand Voice
          - Professional yet approachable
          - Customer-centric language
          - Clear and concise communication
          
          ## Content Guidelines
          - Avoid superlatives without data backing
          - Focus on value propositions
          - Use active voice
          - Maintain consistent terminology
          
          ## SEO Requirements
          - Include relevant keywords naturally
          - Optimize meta descriptions (150-160 chars)
          - Use descriptive headings
          - Ensure mobile-friendly content
          DEFAULT_STANDARDS
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Validate configuration
        id: validate
        run: |
          # Validate that standards contain required sections
          if grep -q "Brand Voice\|Content Guidelines\|SEO Requirements" <<< "${{ steps.read-standards.outputs.content }}"; then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

  # Job 3: Main content review using Claude
  content-review:
    needs: [path-detection, load-standards]
    if: needs.path-detection.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Create comprehensive review prompt
        id: create-prompt
        run: |
          # Create a comprehensive prompt incorporating TSG standards
          cat << 'PROMPT_EOF' > review_prompt.txt
          You are an expert content reviewer for TSG Fulfillment Services. Review the code changes in this pull request focusing on content within React/TypeScript components.

          ## Company Standards from claude.md:
          ${{ needs.load-standards.outputs.standards-content }}

          ## Your Review Tasks:

          ### 1. Grammar and Spelling Review
          - Check all text content, comments, and string literals for grammar and spelling errors
          - Ensure proper punctuation and sentence structure
          - Verify consistency in capitalization and formatting
          - Pay special attention to customer-facing text in UI components

          ### 2. Content Accuracy and Anti-Exaggeration
          - Flag any unsubstantiated claims or superlatives (e.g., "best", "fastest", "only")
          - Ensure technical specifications are accurate
          - Verify that features described actually exist in the code
          - Check for misleading or potentially false advertising

          ### 3. SEO Optimization Analysis
          - Review meta tags, page titles, and descriptions in components
          - Check for proper heading hierarchy (H1-H6)
          - Analyze keyword usage and density
          - Suggest improvements for search visibility
          - Verify image alt texts and aria-labels
          - Check for SEO-friendly URL structures in routing

          ### 4. Brand Consistency Check
          - Ensure content aligns with TSG Fulfillment Services brand voice
          - Verify consistent use of company terminology
          - Check that tone matches our professional yet approachable standard
          - Flag any content that doesn't align with our customer-centric approach

          ### 5. Technical Content Review
          - Verify that component prop descriptions are accurate
          - Check that error messages are helpful and user-friendly
          - Ensure loading states have appropriate messaging
          - Review any hardcoded text that should be internationalized

          ## Output Format:
          Provide your feedback in the following structured format:

          ### üî¥ Critical Issues (Must Fix)
          List any critical issues that must be addressed before merging.

          ### üü° Recommendations (Should Consider)
          List improvements that would enhance content quality.

          ### üü¢ Positive Observations
          Highlight well-written content or good practices observed.

          ### üìä SEO Metrics
          - Keyword optimization score
          - Content readability assessment
          - Technical SEO compliance

          ### üéØ Action Items
          Provide a numbered list of specific actions to take.

          Focus on the following changed files:
          ${{ needs.path-detection.outputs.all-files }}

          Be specific with line numbers and provide exact text corrections where applicable.
          PROMPT_EOF

      - name: Execute Claude content review
        id: claude-review
        uses: anthropics/claude-code-base-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          anthropic_model: ${{ env.CLAUDE_MODEL }}
          prompt_file: review_prompt.txt
          allowed_tools: |
            View,GlobTool,GrepTool,Bash(git diff --name-only origin/main...HEAD),
            Bash(git diff origin/main...HEAD -- $file),Bash(grep -n ""),
            Bash(find client/src -name "*.tsx" -o -name "*.jsx" | head -20)
          timeout_minutes: ${{ env.REVIEW_TIMEOUT }}
          max_turns: 100

          - name: Parse Claude review results
            id: parse-results
            run: |
              if [ ! -f "${{ steps.claude-review.outputs.execution_file }}" ]; then
                echo "‚ùå Execution file not found."
                exit 1
              fi

              echo "üìã Parsing Claude execution output..."
              if ! jq empty "${{ steps.claude-review.outputs.execution_file }}" 2>/dev/null; then
                echo "‚ùå Execution file is not valid JSON."
                echo "Content of execution file:"
                cat "${{ steps.claude-review.outputs.execution_file }}"
                exit 1
              fi

              REVIEW_CONTENT=$(jq -r '[.[] | select(.type == "assistant" and .message.content)] | last | .message.content | map(select(.type == "text")) | map(.text) | join("\n")' "${{ steps.claude-review.outputs.execution_file }}")

              if [ -z "$REVIEW_CONTENT" ]; then
                echo "‚ö†Ô∏è Parsing failed. Check the Claude execution file for issues."
                echo "Content of execution file:"
                cat "${{ steps.claude-review.outputs.execution_file }}"
                exit 1
              fi

              echo "‚úÖ Successfully parsed review content."
              echo "review_content<<EOF" >> $GITHUB_OUTPUT
              echo "$REVIEW_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT

      - name: Post review as PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review_content = `${{ steps.parse-results.outputs.review_content }}`;
            const has_critical = ${{ steps.parse-results.outputs.has_critical_issues }};
            
            // Create the comment header
            const header = `## ü§ñ TSG Fulfillment Content Review Report
            
            **Reviewer**: Claude AI (Model: ${{ env.CLAUDE_MODEL }})
            **Review Type**: ${{ github.event.inputs.review_depth || 'comprehensive' }}
            **Files Reviewed**: ${{ needs.path-detection.outputs.all-files }}
            
            ---
            
            `;
            
            // Add review content
            const full_comment = header + review_content + `
            
            ---
            
            *This automated review follows TSG Fulfillment Services content standards. Please address all critical issues before merging.*
            
            <details>
            <summary>üìã Review Configuration</summary>
            
            - Grammar and spelling check: ‚úÖ
            - Content accuracy verification: ‚úÖ
            - SEO optimization analysis: ‚úÖ
            - Brand consistency check: ‚úÖ
            - Standards file: \`claude.md\`
            
            </details>`;
            
            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: full_comment
            });
            
            // Set PR status based on critical issues
            const status = has_critical ? 'failure' : 'success';
            const description = has_critical 
              ? 'Critical content issues found - review required' 
              : 'Content review passed - no critical issues';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              context: 'TSG Content Review',
              description: description,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/pull/${context.issue.number}#issuecomment-new`
            });

      - name: Post review as commit comment
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review_content = `${{ steps.parse-results.outputs.review_content }}`;
            const has_critical = ${{ steps.parse-results.outputs.has_critical_issues }};
            
            // Create the comment header
            const header = `## ü§ñ TSG Fulfillment Content Review Report
            
            **Reviewer**: Claude AI (Model: ${{ env.CLAUDE_MODEL }})
            **Review Type**: ${{ github.event.inputs.review_depth || 'comprehensive' }}
            **Files Reviewed**: ${{ needs.path-detection.outputs.all-files }}
            **Commit**: ${context.sha.substring(0, 7)}
            
            ---
            
            `;
            
            // Add review content
            const full_comment = header + review_content + `
            
            ---
            
            *This automated review follows TSG Fulfillment Services content standards. Consider addressing issues for better content quality.*
            
            <details>
            <summary>üìã Review Configuration</summary>
            
            - Grammar and spelling check: ‚úÖ
            - Content accuracy verification: ‚úÖ
            - SEO optimization analysis: ‚úÖ
            - Brand consistency check: ‚úÖ
            - Standards file: \`claude.md\`
            
            </details>`;
            
            // Post commit comment
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: full_comment
            });
            
            // Set commit status based on critical issues
            const status = has_critical ? 'failure' : 'success';
            const description = has_critical 
              ? 'Critical content issues found - review recommended' 
              : 'Content review passed - no critical issues';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              context: 'TSG Content Review',
              description: description,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}#commitcomment-new`
            });

  # Job 4: Summary and notifications
  review-summary:
    needs: [content-review, path-detection]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create review summary
        run: |
          echo "## üìä Content Review Summary"
          echo ""
          echo "**Total files reviewed**: $(echo '${{ needs.path-detection.outputs.all-files }}' | jq -r '. | length')"
          echo "**Review status**: ${{ needs.content-review.result }}"
          echo ""
          echo "### File type breakdown:"
          echo "- TSX files: $(echo '${{ needs.path-detection.outputs.tsx-files }}' | jq -r '. | length // 0')"
          echo "- JSX files: $(echo '${{ needs.path-detection.outputs.jsx-files }}' | jq -r '. | length // 0')"
          echo "- TS files: $(echo '${{ needs.path-detection.outputs.ts-files }}' | jq -r '. | length // 0')"
          echo "- JS files: $(echo '${{ needs.path-detection.outputs.js-files }}' | jq -r '. | length // 0')"

      - name: Notify on failure
        if: needs.content-review.result == 'failure'
        run: |
          echo "‚ö†Ô∏è Content review workflow failed. Please check the logs for details."
          exit 1