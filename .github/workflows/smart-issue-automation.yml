name: Smart Issue Automation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
    types: [ opened, closed, synchronize ]
  workflow_dispatch:
    inputs:
      force_create:
        description: 'Force create issue regardless of conditions'
        required: false
        default: 'false'
        type: boolean
      issue_template:
        description: 'Issue template to use'
        required: false
        default: 'standard'
        type: choice
        options:
        - standard
        - seo-focused
        - security-audit
        - performance-review

env:
  # Configuration - modify these as needed
  ENABLE_AUTO_ISSUES: true
  MIN_CHANGED_FILES: 1
  EXCLUDE_BRANCHES: "dependabot/*,renovate/*"
  
jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      should_create_issue: ${{ steps.analysis.outputs.should_create }}
      issue_type: ${{ steps.analysis.outputs.issue_type }}
      priority: ${{ steps.analysis.outputs.priority }}
      template: ${{ steps.analysis.outputs.template }}
      commit_data: ${{ steps.commit-info.outputs.data }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 10

    - name: Extract commit information
      id: commit-info
      run: |
        # Get comprehensive commit data
        COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
        COMMIT_BODY=$(git log -1 --pretty=format:'%b')
        COMMIT_HASH=$(git rev-parse --short HEAD)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
        COMMIT_EMAIL=$(git log -1 --pretty=format:'%ae')
        COMMIT_DATE=$(git log -1 --pretty=format:'%ci')
        
        # Get file changes
        if [ "${{ github.event_name }}" = "push" ]; then
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          ADDED_FILES=$(git diff --name-status HEAD~1 HEAD | grep "^A" | cut -f2)
          MODIFIED_FILES=$(git diff --name-status HEAD~1 HEAD | grep "^M" | cut -f2)
          DELETED_FILES=$(git diff --name-status HEAD~1 HEAD | grep "^D" | cut -f2)
        else
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          ADDED_FILES=$(git diff --name-status origin/${{ github.base_ref }}...HEAD | grep "^A" | cut -f2)
          MODIFIED_FILES=$(git diff --name-status origin/${{ github.base_ref }}...HEAD | grep "^M" | cut -f2)
          DELETED_FILES=$(git diff --name-status origin/${{ github.base_ref }}...HEAD | grep "^D" | cut -f2)
        fi
        
        LINES_ADDED=$(git diff --shortstat HEAD~1 HEAD | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
        LINES_DELETED=$(git diff --shortstat HEAD~1 HEAD | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
        
        # Create JSON data structure
        DATA=$(jq -n \
          --arg message "$COMMIT_MESSAGE" \
          --arg body "$COMMIT_BODY" \
          --arg hash "$COMMIT_HASH" \
          --arg author "$COMMIT_AUTHOR" \
          --arg email "$COMMIT_EMAIL" \
          --arg date "$COMMIT_DATE" \
          --arg changed_files "$CHANGED_FILES" \
          --arg added_files "$ADDED_FILES" \
          --arg modified_files "$MODIFIED_FILES" \
          --arg deleted_files "$DELETED_FILES" \
          --arg lines_added "$LINES_ADDED" \
          --arg lines_deleted "$LINES_DELETED" \
          '{
            message: $message,
            body: $body,
            hash: $hash,
            author: $author,
            email: $email,
            date: $date,
            changed_files: ($changed_files | split("\n") | map(select(. != ""))),
            added_files: ($added_files | split("\n") | map(select(. != ""))),
            modified_files: ($modified_files | split("\n") | map(select(. != ""))),
            deleted_files: ($deleted_files | split("\n") | map(select(. != ""))),
            lines_added: ($lines_added | tonumber),
            lines_deleted: ($lines_deleted | tonumber)
          }')
        
        echo "data=$DATA" >> $GITHUB_OUTPUT

    - name: Analyze changes and determine action
      id: analysis
      run: |
        # Parse commit data
        COMMIT_DATA='${{ steps.commit-info.outputs.data }}'
        MESSAGE=$(echo "$COMMIT_DATA" | jq -r '.message')
        CHANGED_FILES=$(echo "$COMMIT_DATA" | jq -r '.changed_files[]' | tr '\n' ' ')
        LINES_ADDED=$(echo "$COMMIT_DATA" | jq -r '.lines_added')
        LINES_DELETED=$(echo "$COMMIT_DATA" | jq -r '.lines_deleted')
        
        echo "Analyzing commit: $MESSAGE"
        echo "Changed files: $CHANGED_FILES"
        echo "Lines: +$LINES_ADDED -$LINES_DELETED"
        
        # Initialize variables
        SHOULD_CREATE="false"
        ISSUE_TYPE="maintenance"
        PRIORITY="low"
        TEMPLATE="standard"
        
        # Force creation if workflow dispatch
        if [ "${{ github.event.inputs.force_create }}" = "true" ]; then
          SHOULD_CREATE="true"
          TEMPLATE="${{ github.event.inputs.issue_template }}"
          echo "Force creating issue with template: $TEMPLATE"
        fi
        
        # Check commit message patterns
        if [[ "$MESSAGE" =~ ^(feat|feature): ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="feature"
          PRIORITY="medium"
          TEMPLATE="standard"
        elif [[ "$MESSAGE" =~ ^(fix|bugfix): ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="bugfix"
          PRIORITY="high"
          TEMPLATE="standard"
        elif [[ "$MESSAGE" =~ ^(security|sec): ]] || [[ "$MESSAGE" =~ (vulnerabilit|exploit|auth|login) ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="security"
          PRIORITY="critical"
          TEMPLATE="security-audit"
        elif [[ "$MESSAGE" =~ (seo|SEO|search|optimization) ]] || [[ "$CHANGED_FILES" =~ (sitemap|robots\.txt|meta|schema) ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="seo"
          PRIORITY="medium"
          TEMPLATE="seo-focused"
        elif [[ "$MESSAGE" =~ (perf|performance|speed|optimization) ]] || [[ "$CHANGED_FILES" =~ (webpack|vite|bundle|performance) ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="performance"
          PRIORITY="medium"
          TEMPLATE="performance-review"
        fi
        
        # Check file-based triggers
        if [[ "$CHANGED_FILES" =~ (package\.json|yarn\.lock|Dockerfile|docker-compose) ]]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="infrastructure"
          PRIORITY="medium"
        fi
        
        # Check for large changes
        if [ "$LINES_ADDED" -gt 200 ] || [ "$LINES_DELETED" -gt 100 ]; then
          SHOULD_CREATE="true"
          ISSUE_TYPE="major-change"
          PRIORITY="high"
        fi
        
        # Skip for excluded branches
        if [[ "${{ github.ref }}" =~ $EXCLUDE_BRANCHES ]]; then
          SHOULD_CREATE="false"
          echo "Skipping for excluded branch pattern"
        fi
        
        # Skip if minimal changes
        if [ "${#CHANGED_FILES}" -lt "$MIN_CHANGED_FILES" ] && [ "${{ github.event.inputs.force_create }}" != "true" ]; then
          SHOULD_CREATE="false"
          echo "Skipping for minimal changes"
        fi
        
        echo "should_create=$SHOULD_CREATE" >> $GITHUB_OUTPUT
        echo "issue_type=$ISSUE_TYPE" >> $GITHUB_OUTPUT
        echo "priority=$PRIORITY" >> $GITHUB_OUTPUT
        echo "template=$TEMPLATE" >> $GITHUB_OUTPUT
        
        echo "Decision: Create=$SHOULD_CREATE, Type=$ISSUE_TYPE, Priority=$PRIORITY, Template=$TEMPLATE"

  create-issue:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_create_issue == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Generate issue content
      id: content
      run: |
        COMMIT_DATA='${{ needs.analyze-changes.outputs.commit_data }}'
        ISSUE_TYPE="${{ needs.analyze-changes.outputs.issue_type }}"
        PRIORITY="${{ needs.analyze-changes.outputs.priority }}"
        TEMPLATE="${{ needs.analyze-changes.outputs.template }}"
        
        MESSAGE=$(echo "$COMMIT_DATA" | jq -r '.message')
        HASH=$(echo "$COMMIT_DATA" | jq -r '.hash')
        AUTHOR=$(echo "$COMMIT_DATA" | jq -r '.author')
        DATE=$(echo "$COMMIT_DATA" | jq -r '.date')
        CHANGED_FILES=$(echo "$COMMIT_DATA" | jq -r '.changed_files | join(", ")')
        LINES_ADDED=$(echo "$COMMIT_DATA" | jq -r '.lines_added')
        LINES_DELETED=$(echo "$COMMIT_DATA" | jq -r '.lines_deleted')
        
        # Generate title
        case $PRIORITY in
          critical) PRIORITY_EMOJI="üö®" ;;
          high) PRIORITY_EMOJI="‚ö†Ô∏è" ;;
          medium) PRIORITY_EMOJI="üìù" ;;
          *) PRIORITY_EMOJI="üìã" ;;
        esac
        
        TITLE="$PRIORITY_EMOJI [AUTO-$ISSUE_TYPE] $MESSAGE"
        
        # Generate template-specific content
        case $TEMPLATE in
          "seo-focused")
            BODY="## üîç SEO Impact Analysis Required

### Commit Details
- **Hash:** \`$HASH\`
- **Author:** $AUTHOR
- **Date:** $DATE
- **Changes:** +$LINES_ADDED/-$LINES_DELETED lines

### SEO Checklist
- [ ] **Meta Tags:** Verify title and description tags
- [ ] **Structured Data:** Validate JSON-LD schema markup
- [ ] **Sitemap:** Check XML sitemap generation
- [ ] **Robots.txt:** Ensure proper crawler directives
- [ ] **Core Web Vitals:** Monitor performance impact
- [ ] **Mobile Usability:** Test responsive behavior
- [ ] **Image SEO:** Verify alt tags and optimization
- [ ] **Internal Linking:** Check navigation structure

### Files Modified
\`\`\`
$CHANGED_FILES
\`\`\`

### Action Items
- [ ] Run SEO audit tools
- [ ] Test search console integration
- [ ] Verify structured data with Google's tool
- [ ] Check pagespeed insights scores"
            LABELS="seo,auto-generated,needs-review"
            ;;
            
          "security-audit")
            BODY="## üõ°Ô∏è Security Review Required

### Security Assessment
- **Risk Level:** $PRIORITY
- **Commit:** \`$HASH\`
- **Author:** $AUTHOR

### Security Checklist
- [ ] **Dependency Scan:** Check for vulnerable packages
- [ ] **Code Review:** Manual security code review
- [ ] **Authentication:** Verify auth mechanisms
- [ ] **Input Validation:** Check user input handling
- [ ] **Data Exposure:** Ensure no sensitive data leaks
- [ ] **HTTPS:** Verify secure connections
- [ ] **Headers:** Check security headers
- [ ] **Secrets:** Scan for hardcoded credentials

### Files Modified
\`\`\`
$CHANGED_FILES
\`\`\`

### Security Tools
- [ ] Run SAST (Static Application Security Testing)
- [ ] Perform dependency vulnerability scan
- [ ] Check for secrets in code"
            LABELS="security,auto-generated,needs-review,urgent"
            ;;
            
          "performance-review")
            BODY="## ‚ö° Performance Impact Review

### Performance Analysis
- **Scope:** $LINES_ADDED added, $LINES_DELETED removed lines
- **Commit:** \`$HASH\`
- **Author:** $AUTHOR

### Performance Checklist
- [ ] **Bundle Size:** Check JavaScript bundle impact
- [ ] **Core Web Vitals:** Monitor LCP, FID, CLS
- [ ] **Image Optimization:** Verify image compression
- [ ] **Caching:** Check cache strategies
- [ ] **CDN:** Ensure proper CDN usage
- [ ] **Database:** Monitor query performance
- [ ] **Memory Usage:** Check for memory leaks
- [ ] **Load Testing:** Verify under load

### Files Modified
\`\`\`
$CHANGED_FILES
\`\`\`

### Performance Tools
- [ ] Run Lighthouse audit
- [ ] Check WebPageTest results
- [ ] Monitor real user metrics"
            LABELS="performance,auto-generated,needs-review"
            ;;
            
          *)
            BODY="## üìã Code Review Required

### Change Summary
- **Type:** $ISSUE_TYPE
- **Priority:** $PRIORITY
- **Commit:** \`$HASH\`
- **Author:** $AUTHOR
- **Date:** $DATE
- **Impact:** +$LINES_ADDED/-$LINES_DELETED lines

### Review Checklist
- [ ] **Code Quality:** Review code standards compliance
- [ ] **Testing:** Ensure adequate test coverage
- [ ] **Documentation:** Update relevant documentation
- [ ] **Breaking Changes:** Document any breaking changes
- [ ] **Performance:** Check for performance regressions
- [ ] **Security:** Basic security review
- [ ] **Browser Testing:** Cross-browser compatibility

### Files Modified
\`\`\`
$CHANGED_FILES
\`\`\`

### Next Steps
- [ ] Assign reviewer
- [ ] Schedule testing
- [ ] Update documentation"
            LABELS="review-needed,auto-generated"
            ;;
        esac
        
        echo "title=$TITLE" >> $GITHUB_OUTPUT
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "labels=$LABELS" >> $GITHUB_OUTPUT

    - name: Create GitHub Issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `${{ steps.content.outputs.title }}`;
          const body = `${{ steps.content.outputs.body }}`;
          const labels = `${{ steps.content.outputs.labels }}`.split(',');
          const priority = `${{ needs.analyze-changes.outputs.priority }}`;
          
          // Create the issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: labels,
            assignees: ['${{ github.actor }}']
          });
          
          console.log(`Created issue #${issue.data.number}: ${title}`);
          
          // Add milestone if critical/high priority
          if (priority === 'critical' || priority === 'high') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `üéØ **${priority.toUpperCase()} PRIORITY** - This issue requires immediate attention!\n\nCC: @${{ github.repository_owner }}`
            });
          }
          
          return issue.data.number;

  notify-team:
    needs: [analyze-changes, create-issue]
    if: needs.analyze-changes.outputs.priority == 'critical'
    runs-on: ubuntu-latest
    
    steps:
    - name: Send notification
      run: |
        echo "Critical issue created - implement team notification here"
        # Add Slack/Discord/Email notification logic here