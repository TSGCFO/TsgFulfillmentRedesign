name: Claude Code for Development (Full MCP)
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  push:
    branches:
      - '**'

jobs:
  claude:
    # Only run on development branches or specific triggers
    if: |
      ((github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude'))) ||
      (github.event_name == 'push' && contains(toJSON(github.event.commits), '@claude')))

    runs-on: ubuntu-latest
    permissions:
      contents: write          # Full repository access
      pull-requests: write     # Create/modify PRs
      issues: write           # Create/modify issues  
      actions: write          # Workflow management
      checks: write           # Status checks
      deployments: write      # Deployments
      discussions: write      # Discussions
      pages: write            # GitHub Pages
      repository-projects: write # Projects
      security-events: write  # Security alerts
      statuses: write         # Commit statuses
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js for MCP servers
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install project dependencies
        run: |
          npm ci
          echo "✅ Project dependencies installed"

      - name: Run Claude Code with Full Development MCP
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.P_A_T }}
          # Full development access
          allowed_tools: Bash(*),Bash(git status),Bash(git log),Bash(git show),Bash(git blame),Bash(git reflog),Bash(git stash list),Bash(git ls-files),Bash(git branch),Bash(git tag),Bash(git diff),Bash(npm run),Bash(npm test),View,GlobTool,GrepTool,BatchTool,mcp__github__*,mcp__github_file_ops__*,mcp__sequential-thinking__*,mcp__filesystem__*,mcp__web-search__*,mcp__database__*,mcp__memory__*
          mcp_config: |
            {
              "mcpServers": {
                "sequential-thinking": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
                  "timeout": 6000000000
                },
                "filesystem": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-filesystem"],
                  "env": {
                    "ALLOWED_DIRECTORIES": "/home/runner/work/TsgFulfillmentRedesign/TsgFulfillmentRedesign",
                    "ENABLE_WRITE": "true",
                    "MAX_FILE_SIZE": "10000000MB"
                  },
                  "timeout": 300000000
                },
                "web-search": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-web-search"],
                  "env": {
                    "BRAVE_API_KEY": "${{ secrets.BRAVE_API_KEY }}",
                    "MAX_RESULTS": "1000",
                    "SEARCH_TIMEOUT": "150000000"
                  },
                  "timeout": 30000000
                },
                "memory": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-memory"],
                  "env": {
                    "MEMORY_BANK_SIZE": "1000",
                    "PERSISTENCE": "session"
                  },
                  "timeout": 20000000
                },
                "database": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-postgres"],
                  "env": {
                    "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
                    "POOL_SIZE": "5",
                    "QUERY_TIMEOUT": "3000000"
                  },
                  "timeout": 4500000
                }
              }
            }

      # Run tests after Claude makes changes
      - name: Run tests if code changed
        if: success()
        run: |
          if git diff --quiet HEAD~1; then
            echo "No changes detected, skipping tests"
          else
            echo "Changes detected, running tests..."
            npm test || echo "⚠️ Tests failed, but continuing..."
            npm run lint || echo "⚠️ Linting failed, but continuing..."
          fi

      # Development environment cleanup
      - name: Development cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up development environment..."
          # Clean up any temporary files
          find /tmp -name "*mcp*" -type f -delete 2>/dev/null || true
          # Log development session
          echo "Development session completed at $(date)"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"